to do:
 * handle resizing somehow
   - In the settings, there will be entry "max minefield size"
   - The actual minefield size will be the smallest of "max minefield size" and
     "available screen size"
   - When user resizes window, minesweeper must handle this somehow - at least
     resize the internal window objects not to fall out of screen and throw
     error.
   - The position and size of the minefield should also be updated
   - If the minefield size changes, there is no way of continuing the game
   - Therefore, the most "game-preserving" option seems:
     ~ If there is a game running and the available space increases:
           keep the minefield at current size, resize new game
     ~ If there is a game running and the available space schrinks:
           pause the game, summon a dialog, asking the user to kindly enlarge
           the window back. Otherwise, the game will be terminated.
     ~ If the game is not running (either fresh or post-game):
           delete the minefield, resize and create new, adapted to the new size
 * snapping - DONE
   - cell types:
      ┌─ border
      └─ cell
          ├─ covered
          │   ├─ flagged
          │   │   ├─ explosive
          │   │   └─ can-be-empty
          │   └─ pressable
          │       ┠─┬─ possible
          │       ┃ └─ can-be-mine
          │       ┠─┬─ explosive
          │       ┃ └─ can-be-empty
          │       ┖─┬─ untouched
          │         └─ boundary
          └─ uncovered
              ├─ chordable
              └─ unchordable
   - left click:
       border <
       uncovered == flagged <
       pressable can-be-mine untouched <
       pressable can-be-mine boundary <
       pressable possible
   - right click:
       border <
       flagged explosive <
       pressable can-be-empty <
       unchordable <
       chordable <
       flagged can-be-empty <
       pressable explosive
   - when indecisive, snap to the right
 * Optimalization ideas:
   - When a cell is certainly mine, do not treat it as boundary cell, create
     a special cell class for this. This prevents these "perfect-information"
     cells to be copied over and over when bruteforcing the new boundaries.
   - Create a special tree-like structure for the boundaries to prevent copying
     data all together. The only operation we need is "cutting the tree",
     meaning choosing a subset of the boundaries with given value for given
     cell. This operation might be implementable in a bearable time.

     This tree-like structure could be a single large number r. Let [c1,...,cn]
     be a list of boundary cells. A particular boundary B could be represented
     by a number #B, whose i-th bit would give the state of ai. Then the j-th
     bit of r would be 1 if the boundary represented by j is possible.

     Extending:
     'for j in range(numbits(r)) if r[j]:
          newr[2j] = 1 if can_be_empty(j), newr[2j+1] = 1 if can_be_mine(j)'
     Cutting: remove half of the bits of r, in evenly-spaced blocks of the size
     corresponding to the cell we want to cut through
 * Quick fixes:
   - There are graphic bugs when exploding (most notably when chording,
     there are pressed cells whose spaces get overwritten wrongly)
 * [BRANCH TEST]
